version: '2'
vars:
  MYSQLURL: "mysql://{{.PREGXAS_DB_USER}}:{{.PREGXAS_DB_PASSWORD}}@tcp({{.PREGXAS_DB_HOST}}:{{.PREGXAS_DB_PORT}})/{{.PREGXAS_DB_NAME}}"

env:
  GOFLAGS: "-mod=vendor"

tasks:
  build:
    desc: Builds the API and generates a binary for the current OS
    cmds:
      - go build -mod=vendor .

  run:
    desc: Builds and runs the service locally
    deps: [build]
    sources: 
      - ./*.go
    cmds:
      - ./pregxas-api

  vendor:
    desc: Updates the vendor directory
    cmds:
      - go mod tidy
      - go mod vendor

  test:
    desc: Runs go test
    cmds:
      - go test -mod=vendor -v ./api

  cover:
    desc: Runs coverage and generates the needed artifacts
    cmds:
      - go test -mod=vendor -v -coverprofile=coverage.out ./api && gocover-cobertura < coverage.out > coverage.xml && go tool cover -html=coverage.out -o coverage.html

  docs:
    desc: Runs a godoc command locally
    cmds:
      - godoc -http=":6060"

  docker-build:
    desc: Builds and tags the docker image
    cmds:
      - docker build -t "treelightsoftware/pregxas-api" .
  
  docker-cover:
    desc: Runs the latest built docker image
    cmds:
      - docker-compose --project-name "pregxas-api" up --build --always-recreate-deps --force-recreate --renew-anon-volume --abort-on-container-exit --exit-code-from "api-service"

  docker-run:
    desc: Runs the latest built docker image
    deps: [docker-build]
    cmds:
      - docker run "treelightsoftware/pregxas-api"

  docker-push:
    desc: Builds and tags the docker image then pushes it to the hub
    deps: [docker-build]
    cmds:
      - docker push "treelightsoftware/pregxas-api"

  docker-slim:
    desc: Builds a slim production slimmed-down image.
    deps: [docker-build]
    cmds:
      - docker build -f Dockerfile-slim -t "treelightsoftware/pregxas-api:slim" .
      - docker push "treelightsoftware/pregxas-api:slim"
  
  db_up:
    desc: Applies database migrations
    cmds:
      - migrate -path ./sql -database "{{.MYSQLURL}}" up